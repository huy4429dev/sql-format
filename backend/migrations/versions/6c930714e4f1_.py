"""empty message

Revision ID: 6c930714e4f1
Revises: 0277cfddb613
Create Date: 2023-05-05 00:59:13.438784

"""
from alembic import op
import sqlalchemy as sa
import os


# revision identifiers, used by Alembic.
revision = '6c930714e4f1'
down_revision = '0277cfddb613'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('files', schema=None) as batch_op:
        batch_op.create_unique_constraint(None, ['id'])

    with op.batch_alter_table('log', schema=None) as batch_op:
        batch_op.create_unique_constraint(None, ['log_id'])

    with op.batch_alter_table('recipe', schema=None) as batch_op:
        batch_op.create_unique_constraint(None, ['recipe_id'])

    with op.batch_alter_table('template', schema=None) as batch_op:
        batch_op.create_unique_constraint(None, ['template_id'])

    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.create_unique_constraint(None, ['user_id'])

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.drop_constraint(None, type_='unique')

    with op.batch_alter_table('template', schema=None) as batch_op:
        batch_op.drop_constraint(None, type_='unique')

    with op.batch_alter_table('recipe', schema=None) as batch_op:
        batch_op.drop_constraint(None, type_='unique')

    with op.batch_alter_table('log', schema=None) as batch_op:
        batch_op.drop_constraint(None, type_='unique')

    with op.batch_alter_table('files', schema=None) as batch_op:
        batch_op.drop_constraint(None, type_='unique')

    # ### end Alembic commands ###

def delete_migration(revision):
    # Step 1: Delete the migration script file
    filename = f'migrations/versions/{revision}.py'
    try:
        os.remove(filename)
        print(f'Successfully deleted {filename}')
    except OSError:
        print(f'Failed to delete {filename}')

    # Step 2: Remove the corresponding entry from the alembic_version table
    result = db.engine.execute(f"DELETE FROM alembic_version WHERE version_num = '{revision}'")
    if result.rowcount == 1:
        print(f'Successfully removed revision {revision} from alembic_version table')
    else:
        print(f'Failed to remove revision {revision} from alembic_version table')

    # Step 3: Stamp the current revision to the latest revision
    result = migrate.stamp()
    if result:
        print('Successfully stamped current revision to the latest revision')
    else:
        print('Failed to stamp current revision to the latest revision')
